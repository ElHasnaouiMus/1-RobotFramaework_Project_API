<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.1 (Python 3.6.7 on win32)" generated="20190311 16:46:16.742" rpa="false">
<suite id="s1" name="Tests" source="C:\development\robot-scripts\1-RobotFramaework_demo_Project_API\demo\tests">
<suite id="s1-s1" name="Api" source="C:\development\robot-scripts\1-RobotFramaework_demo_Project_API\demo\tests\api.robot">
<test id="s1-s1-t1" name="Vérifier la connection au site web">
<kw name="Verify Successfull Login Request" library="LoginBack">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>session1</arg>
<arg>${WEBSITE_URL}</arg>
</arguments>
<msg timestamp="20190311 16:46:17.164" level="INFO">Creating Session using : alias=session1, url=http://localhost/demo/api/user, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20190311 16:46:17.164" endtime="20190311 16:46:17.164"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>session1</arg>
<arg>login.php?username=${USERNAME}&amp;password=${PASSWORD}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190311 16:46:17.179" level="INFO">Get Request using : alias=session1, uri=login.php?username=yasser&amp;password=Octave01-, headers=None json=None</msg>
<msg timestamp="20190311 16:46:17.179" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20190311 16:46:17.164" endtime="20190311 16:46:17.179"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20190311 16:46:17.195" level="INFO">${json} = {'status': True, 'message': 'Successfully Login!', 'id': '34', 'username': 'yasser'}</msg>
<status status="PASS" starttime="20190311 16:46:17.195" endtime="20190311 16:46:17.195"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190311 16:46:17.195" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190311 16:46:17.195" endtime="20190311 16:46:17.195"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json['message']}</arg>
<arg>Successfully Login!</arg>
</arguments>
<status status="PASS" starttime="20190311 16:46:17.195" endtime="20190311 16:46:17.195"></status>
</kw>
<status status="PASS" starttime="20190311 16:46:17.164" endtime="20190311 16:46:17.195"></status>
</kw>
<status status="PASS" starttime="20190311 16:46:17.164" endtime="20190311 16:46:17.195" critical="yes"></status>
</test>
<test id="s1-s1-t2" name="Vérifier l'existence du nom d'utilisateur et mot de passe">
<kw name="Verify Successfull Login DataBase" library="LoginBack">
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>database='demo', user='root', password='', host='localhost'</arg>
</arguments>
<msg timestamp="20190311 16:46:17.226" level="INFO">Executing : Connect To Database Using Custom Params : pymysql.connect(db_api_2.connect(database='demo', user='root', password='', host='localhost')) </msg>
<status status="PASS" starttime="20190311 16:46:17.195" endtime="20190311 16:46:17.226"></status>
</kw>
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<arguments>
<arg>select id from users where username = '${USERNAME}' and password = md5('${PASSWORD}')</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20190311 16:46:17.226" level="INFO">Executing : Row Count Is Equal To X  |  select id from users where username = 'yasser' and password = md5('Octave01-')  |  1 </msg>
<msg timestamp="20190311 16:46:17.226" level="INFO">Executing : Row Count  |  select id from users where username = 'yasser' and password = md5('Octave01-') </msg>
<status status="PASS" starttime="20190311 16:46:17.226" endtime="20190311 16:46:17.226"></status>
</kw>
<status status="PASS" starttime="20190311 16:46:17.195" endtime="20190311 16:46:17.226"></status>
</kw>
<status status="PASS" starttime="20190311 16:46:17.195" endtime="20190311 16:46:17.226" critical="yes"></status>
</test>
<status status="PASS" starttime="20190311 16:46:16.774" endtime="20190311 16:46:17.226"></status>
</suite>
<status status="PASS" starttime="20190311 16:46:16.742" endtime="20190311 16:46:17.226"></status>
</suite>
<statistics>
<total>
<stat pass="2" fail="0">Critical Tests</stat>
<stat pass="2" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="2" fail="0" id="s1" name="Tests">Tests</stat>
<stat pass="2" fail="0" id="s1-s1" name="Api">Tests.Api</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
