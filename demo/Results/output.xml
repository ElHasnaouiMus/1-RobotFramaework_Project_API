<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.1 (Python 3.6.7 on win32)" generated="20190312 12:09:26.362" rpa="false">
<suite id="s1" name="Api" source="C:\development\robot-scripts\1-RobotFramaework_demo_Project_API\demo\Tests\api.robot">
<test id="s1-t1" name="Vérifier la connection au site web">
<kw name="Verify Successfull Login Request" library="LoginBack">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>session1</arg>
<arg>${website_link}</arg>
</arguments>
<msg timestamp="20190312 12:09:26.798" level="INFO">Creating Session using : alias=session1, url=http://localhost/demo/api/user, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20190312 12:09:26.797" endtime="20190312 12:09:26.798"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>session1</arg>
<arg>login.php?username=${username}&amp;password=${password}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190312 12:09:26.825" level="INFO">Get Request using : alias=session1, uri=login.php?username=Mustaph&amp;password=ml, headers=None json=None</msg>
<msg timestamp="20190312 12:09:26.825" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20190312 12:09:26.798" endtime="20190312 12:09:26.825"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20190312 12:09:26.826" level="INFO">${json} = {'status': True, 'message': 'Successfully Login!', 'id': '57', 'username': 'Mustaph'}</msg>
<status status="PASS" starttime="20190312 12:09:26.825" endtime="20190312 12:09:26.826"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json}</arg>
</arguments>
<msg timestamp="20190312 12:09:26.827" level="INFO">{'status': True, 'message': 'Successfully Login!', 'id': '57', 'username': 'Mustaph'}</msg>
<status status="PASS" starttime="20190312 12:09:26.826" endtime="20190312 12:09:26.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190312 12:09:26.827" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190312 12:09:26.827" endtime="20190312 12:09:26.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json['message']}</arg>
<arg>Successfully Login!</arg>
</arguments>
<status status="PASS" starttime="20190312 12:09:26.828" endtime="20190312 12:09:26.828"></status>
</kw>
<status status="PASS" starttime="20190312 12:09:26.797" endtime="20190312 12:09:26.828"></status>
</kw>
<tags>
<tag>First</tag>
</tags>
<status status="PASS" starttime="20190312 12:09:26.796" endtime="20190312 12:09:26.828" critical="yes"></status>
</test>
<test id="s1-t2" name="Vérifier l'existence du nom d'utilisateur et mot de passe">
<kw name="Verify Successfull Login DataBase" library="LoginBack">
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>database='demo', user='root', password='', host='localhost'</arg>
</arguments>
<msg timestamp="20190312 12:09:26.860" level="INFO">Executing : Connect To Database Using Custom Params : pymysql.connect(db_api_2.connect(database='demo', user='root', password='', host='localhost')) </msg>
<status status="PASS" starttime="20190312 12:09:26.831" endtime="20190312 12:09:26.863"></status>
</kw>
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<arguments>
<arg>select id from users where username = '${username}' and password = md5('${password}')</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20190312 12:09:26.863" level="INFO">Executing : Row Count Is Equal To X  |  select id from users where username = 'Mustaph' and password = md5('ml')  |  1 </msg>
<msg timestamp="20190312 12:09:26.863" level="INFO">Executing : Row Count  |  select id from users where username = 'Mustaph' and password = md5('ml') </msg>
<status status="PASS" starttime="20190312 12:09:26.863" endtime="20190312 12:09:26.864"></status>
</kw>
<status status="PASS" starttime="20190312 12:09:26.830" endtime="20190312 12:09:26.864"></status>
</kw>
<tags>
<tag>First</tag>
</tags>
<status status="PASS" starttime="20190312 12:09:26.830" endtime="20190312 12:09:26.864" critical="yes"></status>
</test>
<test id="s1-t3" name="Vérifier connexion apres suppression du User">
<kw name="Delete User From DataBase" library="LoginBack">
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>database='demo', user='root', password='', host='localhost'</arg>
</arguments>
<msg timestamp="20190312 12:09:26.867" level="INFO">Executing : Connect To Database Using Custom Params : pymysql.connect(db_api_2.connect(database='demo', user='root', password='', host='localhost')) </msg>
<status status="PASS" starttime="20190312 12:09:26.866" endtime="20190312 12:09:26.878"></status>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands  and returns number of rows
affected. Useful to pass arguments to your sql. Set optional input
`sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<arguments>
<arg>DELETE FROM users WHERE username = '${username}' and password = md5('${password}')</arg>
</arguments>
<msg timestamp="20190312 12:09:26.879" level="INFO">Executing : Execute SQL String  |  DELETE FROM users WHERE username = 'Mustaph' and password = md5('ml') </msg>
<status status="PASS" starttime="20190312 12:09:26.879" endtime="20190312 12:09:26.889"></status>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20190312 12:09:26.890" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20190312 12:09:26.890" endtime="20190312 12:09:26.890"></status>
</kw>
<status status="PASS" starttime="20190312 12:09:26.866" endtime="20190312 12:09:26.890"></status>
</kw>
<kw name="Verify Login Request After Delete" library="LoginBack">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>session1</arg>
<arg>${website_link}</arg>
</arguments>
<msg timestamp="20190312 12:09:26.891" level="INFO">Creating Session using : alias=session1, url=http://localhost/demo/api/user, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20190312 12:09:26.891" endtime="20190312 12:09:26.892"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>session1</arg>
<arg>login.php?username=${username}&amp;password=${password}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190312 12:09:26.901" level="INFO">Get Request using : alias=session1, uri=login.php?username=Mustaph&amp;password=ml, headers=None json=None</msg>
<msg timestamp="20190312 12:09:26.902" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20190312 12:09:26.892" endtime="20190312 12:09:26.902"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20190312 12:09:26.902" level="INFO">${json} = {'status': False, 'message': 'Invalid Username or Password!'}</msg>
<status status="PASS" starttime="20190312 12:09:26.902" endtime="20190312 12:09:26.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190312 12:09:26.903" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190312 12:09:26.902" endtime="20190312 12:09:26.903"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json['message']}</arg>
<arg>Successfully Login!</arg>
</arguments>
<msg timestamp="20190312 12:09:26.903" level="FAIL">Invalid Username or Password! != Successfully Login!</msg>
<status status="FAIL" starttime="20190312 12:09:26.903" endtime="20190312 12:09:26.904"></status>
</kw>
<status status="FAIL" starttime="20190312 12:09:26.891" endtime="20190312 12:09:26.904"></status>
</kw>
<tags>
<tag>First</tag>
</tags>
<status status="FAIL" starttime="20190312 12:09:26.865" endtime="20190312 12:09:26.905" critical="yes">Invalid Username or Password! != Successfully Login!</status>
</test>
<status status="FAIL" starttime="20190312 12:09:26.373" endtime="20190312 12:09:26.906"></status>
</suite>
<statistics>
<total>
<stat pass="2" fail="1">Critical Tests</stat>
<stat pass="2" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="2" fail="1">First</stat>
</tag>
<suite>
<stat pass="2" fail="1" id="s1" name="Api">Api</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
