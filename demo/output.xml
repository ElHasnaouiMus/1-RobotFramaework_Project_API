<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.1 (Python 3.6.5 on win32)" generated="20190311 10:49:57.516" rpa="false">
<suite id="s1" name="Api" source="C:\Users\melhasnaoui\Robot-scripts\1-RobotFramaework_Project_API\demo\Tests\api.robot">
<kw name="Open Browser" library="SeleniumLibrary" type="setup">
<doc>Opens a new browser instance to the given ``url``.</doc>
<arguments>
<arg>http://localhost/demo/</arg>
<arg>gc</arg>
</arguments>
<msg timestamp="20190311 10:49:58.093" level="INFO">Opening browser 'gc' to base url 'http://localhost/demo/'.</msg>
<status status="PASS" starttime="20190311 10:49:58.093" endtime="20190311 10:50:01.770"></status>
</kw>
<test id="s1-t1" name="Vérifier la connection au site web">
<kw name="Vérifier la réponse HTTP" library="login">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>demo</arg>
<arg>${website_link}</arg>
</arguments>
<msg timestamp="20190311 10:50:01.775" level="INFO">Creating Session using : alias=demo, url=http://localhost/demo/api/user, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20190311 10:50:01.774" endtime="20190311 10:50:01.776"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>demo</arg>
<arg>/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190311 10:50:01.803" level="INFO">Get Request using : alias=demo, uri=/, headers=None json=None</msg>
<msg timestamp="20190311 10:50:01.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20190311 10:50:01.776" endtime="20190311 10:50:01.804"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190311 10:50:01.805" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190311 10:50:01.804" endtime="20190311 10:50:01.805"></status>
</kw>
<status status="PASS" starttime="20190311 10:50:01.773" endtime="20190311 10:50:01.806"></status>
</kw>
<status status="PASS" starttime="20190311 10:50:01.770" endtime="20190311 10:50:01.811" critical="yes"></status>
</test>
<test id="s1-t2" name="Inscrire un utilisateur">
<kw name="Vérifier qu'il n'existe pas dans la base de donnée" library="signup">
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>database='demo', user='root', password='', host='localhost'</arg>
</arguments>
<msg timestamp="20190311 10:50:01.874" level="INFO">Executing : Connect To Database Using Custom Params : pymysql.connect(db_api_2.connect(database='demo', user='root', password='', host='localhost')) </msg>
<status status="PASS" starttime="20190311 10:50:01.816" endtime="20190311 10:50:01.889"></status>
</kw>
<kw name="Row Count Is 0" library="DatabaseLibrary">
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback.</doc>
<arguments>
<arg>select id from users where username = '${username}' and password = md5('${password}')</arg>
</arguments>
<msg timestamp="20190311 10:50:01.891" level="INFO">Executing : Row Count Is 0  |  select id from users where username = 'Mustaph' and password = md5('ml') </msg>
<msg timestamp="20190311 10:50:01.891" level="INFO">Executing : Row Count  |  select id from users where username = 'Mustaph' and password = md5('ml') </msg>
<status status="PASS" starttime="20190311 10:50:01.889" endtime="20190311 10:50:01.892"></status>
</kw>
<status status="PASS" starttime="20190311 10:50:01.816" endtime="20190311 10:50:01.893"></status>
</kw>
<kw name="Remplir le formulaire d'inscription" library="signup">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click element identified by ``locator``.</doc>
<arguments>
<arg>${sign_up_label}</arg>
</arguments>
<msg timestamp="20190311 10:50:01.895" level="INFO">Clicking element '//label[@for="tab-2"]'.</msg>
<status status="PASS" starttime="20190311 10:50:01.894" endtime="20190311 10:50:02.033"></status>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<doc>Types the given ``text`` into text field identified by ``locator``.</doc>
<arguments>
<arg>${champ_username}</arg>
<arg>${username}</arg>
</arguments>
<msg timestamp="20190311 10:50:02.034" level="INFO">Typing text 'Mustaph' into text field 'xpath=(//input[@name="username"])[2]'.</msg>
<status status="PASS" starttime="20190311 10:50:02.034" endtime="20190311 10:50:02.165"></status>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<doc>Types the given ``text`` into text field identified by ``locator``.</doc>
<arguments>
<arg>${champ_password}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20190311 10:50:02.166" level="INFO">Typing text 'ml' into text field 'xpath=(//input[@name="password"])[2]'.</msg>
<status status="PASS" starttime="20190311 10:50:02.166" endtime="20190311 10:50:02.252"></status>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<doc>Types the given ``text`` into text field identified by ``locator``.</doc>
<arguments>
<arg>${champ2_password}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20190311 10:50:02.253" level="INFO">Typing text 'ml' into text field '//input[@id="pass"]'.</msg>
<status status="PASS" starttime="20190311 10:50:02.252" endtime="20190311 10:50:02.333"></status>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click element identified by ``locator``.</doc>
<arguments>
<arg>${signup_button}</arg>
</arguments>
<msg timestamp="20190311 10:50:02.334" level="INFO">Clicking element 'xpath=(//input[@class="button"])[2]'.</msg>
<status status="PASS" starttime="20190311 10:50:02.334" endtime="20190311 10:50:02.586"></status>
</kw>
<status status="PASS" starttime="20190311 10:50:01.893" endtime="20190311 10:50:02.586"></status>
</kw>
<kw name="Vérifier si il'est ajouté dans le status dans JSON" library="signup">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20190311 10:50:04.601" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20190311 10:50:02.587" endtime="20190311 10:50:04.601"></status>
</kw>
<kw name="Page Should Contain" library="SeleniumLibrary">
<doc>Verifies that current page contains ``text``.</doc>
<arguments>
<arg>"Successfully Signup!"</arg>
</arguments>
<msg timestamp="20190311 10:50:04.616" level="INFO">Current page contains text '"Successfully Signup!"'.</msg>
<status status="PASS" starttime="20190311 10:50:04.601" endtime="20190311 10:50:04.616"></status>
</kw>
<status status="PASS" starttime="20190311 10:50:02.587" endtime="20190311 10:50:04.616"></status>
</kw>
<kw name="Vérifier si il'est ajouté sur la base de données" library="signup">
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<arguments>
<arg>select id from users where username = '${username}' and password = md5('${password}')</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20190311 10:50:04.616" level="INFO">Executing : Row Count Is Equal To X  |  select id from users where username = 'Mustaph' and password = md5('ml')  |  1 </msg>
<msg timestamp="20190311 10:50:04.616" level="INFO">Executing : Row Count  |  select id from users where username = 'Mustaph' and password = md5('ml') </msg>
<status status="PASS" starttime="20190311 10:50:04.616" endtime="20190311 10:50:04.616"></status>
</kw>
<status status="PASS" starttime="20190311 10:50:04.616" endtime="20190311 10:50:04.616"></status>
</kw>
<status status="PASS" starttime="20190311 10:50:01.814" endtime="20190311 10:50:04.616" critical="yes"></status>
</test>
<test id="s1-t3" name="Connecter l'utilisateur inscri">
<kw name="conecter l'utilisateur de test" library="login">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>demo</arg>
<arg>/login.php?username=${username}&amp;password=${password}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190311 10:50:04.632" level="INFO">Get Request using : alias=demo, uri=/login.php?username=Mustaph&amp;password=ml, headers=None json=None</msg>
<msg timestamp="20190311 10:50:04.632" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20190311 10:50:04.616" endtime="20190311 10:50:04.632"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<msg timestamp="20190311 10:50:04.632" level="INFO">{'status': True, 'message': 'Successfully Login!', 'id': '32', 'username': 'Mustaph'}</msg>
<status status="PASS" starttime="20190311 10:50:04.632" endtime="20190311 10:50:04.632"></status>
</kw>
<kw name="Dictionary Should Contain Value" library="Collections">
<doc>Fails if ``value`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>Successfully Login!</arg>
</arguments>
<status status="PASS" starttime="20190311 10:50:04.632" endtime="20190311 10:50:04.632"></status>
</kw>
<status status="PASS" starttime="20190311 10:50:04.616" endtime="20190311 10:50:04.632"></status>
</kw>
<status status="PASS" starttime="20190311 10:50:04.616" endtime="20190311 10:50:04.632" critical="yes"></status>
</test>
<test id="s1-t4" name="Vérifier qu'il est Déja inscrit">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the active browser instance to the provided ``url``.</doc>
<arguments>
<arg>http://localhost/demo/</arg>
</arguments>
<msg timestamp="20190311 10:50:04.632" level="INFO">Opening url 'http://localhost/demo/'</msg>
<status status="PASS" starttime="20190311 10:50:04.632" endtime="20190311 10:50:04.654"></status>
</kw>
<kw name="Vérifier qu'il existe déja dans la base de donnée" library="already_exist">
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>database='demo', user='root', password='', host='localhost'</arg>
</arguments>
<msg timestamp="20190311 10:50:04.658" level="INFO">Executing : Connect To Database Using Custom Params : pymysql.connect(db_api_2.connect(database='demo', user='root', password='', host='localhost')) </msg>
<status status="PASS" starttime="20190311 10:50:04.657" endtime="20190311 10:50:04.671"></status>
</kw>
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<arguments>
<arg>select id from users where username = '${username}' and password = md5('${password}')</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20190311 10:50:04.672" level="INFO">Executing : Row Count Is Equal To X  |  select id from users where username = 'Mustaph' and password = md5('ml')  |  1 </msg>
<msg timestamp="20190311 10:50:04.672" level="INFO">Executing : Row Count  |  select id from users where username = 'Mustaph' and password = md5('ml') </msg>
<status status="PASS" starttime="20190311 10:50:04.671" endtime="20190311 10:50:04.673"></status>
</kw>
<status status="PASS" starttime="20190311 10:50:04.657" endtime="20190311 10:50:04.673"></status>
</kw>
<kw name="Remplir le formulaire d'inscription" library="already_exist">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click element identified by ``locator``.</doc>
<arguments>
<arg>${sign_up_label}</arg>
</arguments>
<msg timestamp="20190311 10:50:04.675" level="INFO">Clicking element '//label[@for="tab-2"]'.</msg>
<status status="PASS" starttime="20190311 10:50:04.674" endtime="20190311 10:50:04.765"></status>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<doc>Types the given ``text`` into text field identified by ``locator``.</doc>
<arguments>
<arg>${champ_username}</arg>
<arg>${username}</arg>
</arguments>
<msg timestamp="20190311 10:50:04.765" level="INFO">Typing text 'Mustaph' into text field 'xpath=(//input[@name="username"])[2]'.</msg>
<status status="PASS" starttime="20190311 10:50:04.765" endtime="20190311 10:50:04.880"></status>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<doc>Types the given ``text`` into text field identified by ``locator``.</doc>
<arguments>
<arg>${champ_password}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20190311 10:50:04.880" level="INFO">Typing text 'ml' into text field 'xpath=(//input[@name="password"])[2]'.</msg>
<status status="PASS" starttime="20190311 10:50:04.880" endtime="20190311 10:50:04.979"></status>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<doc>Types the given ``text`` into text field identified by ``locator``.</doc>
<arguments>
<arg>${champ2_password}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20190311 10:50:04.980" level="INFO">Typing text 'ml' into text field '//input[@id="pass"]'.</msg>
<status status="PASS" starttime="20190311 10:50:04.980" endtime="20190311 10:50:05.084"></status>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click element identified by ``locator``.</doc>
<arguments>
<arg>${signup_button}</arg>
</arguments>
<msg timestamp="20190311 10:50:05.085" level="INFO">Clicking element 'xpath=(//input[@class="button"])[2]'.</msg>
<status status="PASS" starttime="20190311 10:50:05.084" endtime="20190311 10:50:05.271"></status>
</kw>
<status status="PASS" starttime="20190311 10:50:04.674" endtime="20190311 10:50:05.271"></status>
</kw>
<kw name="Vérifier que ça donne déja inscri dans le status JSON" library="already_exist">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20190311 10:50:07.284" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20190311 10:50:05.272" endtime="20190311 10:50:07.284"></status>
</kw>
<kw name="Page Should Contain" library="SeleniumLibrary">
<doc>Verifies that current page contains ``text``.</doc>
<arguments>
<arg>"Username already exists!"</arg>
</arguments>
<msg timestamp="20190311 10:50:07.300" level="INFO">Current page contains text '"Username already exists!"'.</msg>
<status status="PASS" starttime="20190311 10:50:07.284" endtime="20190311 10:50:07.300"></status>
</kw>
<status status="PASS" starttime="20190311 10:50:05.271" endtime="20190311 10:50:07.300"></status>
</kw>
<kw name="Vérifier qu'il est pas ajouté dans la base de donnée" library="already_exist">
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<arguments>
<arg>select id from users where username = '${username}' and password = md5('${password}')</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20190311 10:50:07.300" level="INFO">Executing : Row Count Is Equal To X  |  select id from users where username = 'Mustaph' and password = md5('ml')  |  1 </msg>
<msg timestamp="20190311 10:50:07.300" level="INFO">Executing : Row Count  |  select id from users where username = 'Mustaph' and password = md5('ml') </msg>
<status status="PASS" starttime="20190311 10:50:07.300" endtime="20190311 10:50:07.300"></status>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20190311 10:50:07.300" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20190311 10:50:07.300" endtime="20190311 10:50:07.300"></status>
</kw>
<status status="PASS" starttime="20190311 10:50:07.300" endtime="20190311 10:50:07.300"></status>
</kw>
<status status="PASS" starttime="20190311 10:50:04.632" endtime="20190311 10:50:07.300" critical="yes"></status>
</test>
<test id="s1-t5" name="Supprimer l'utilisateur de test">
<kw name="Suprimmer l'utilisateur de test depuis la base de donnée" library="signup">
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>database='demo', user='root', password='', host='localhost'</arg>
</arguments>
<msg timestamp="20190311 10:50:07.300" level="INFO">Executing : Connect To Database Using Custom Params : pymysql.connect(db_api_2.connect(database='demo', user='root', password='', host='localhost')) </msg>
<status status="PASS" starttime="20190311 10:50:07.300" endtime="20190311 10:50:07.316"></status>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands  and returns number of rows
affected. Useful to pass arguments to your sql. Set optional input
`sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<arguments>
<arg>DELETE FROM users WHERE username = '${username}' and password = md5('${password}')</arg>
</arguments>
<msg timestamp="20190311 10:50:07.316" level="INFO">Executing : Execute SQL String  |  DELETE FROM users WHERE username = 'Mustaph' and password = md5('ml') </msg>
<status status="PASS" starttime="20190311 10:50:07.316" endtime="20190311 10:50:07.676"></status>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20190311 10:50:07.676" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20190311 10:50:07.676" endtime="20190311 10:50:07.676"></status>
</kw>
<status status="PASS" starttime="20190311 10:50:07.300" endtime="20190311 10:50:07.676"></status>
</kw>
<tags>
<tag>deleteuser</tag>
</tags>
<status status="PASS" starttime="20190311 10:50:07.300" endtime="20190311 10:50:07.676" critical="yes"></status>
</test>
<kw name="Close Browser" library="SeleniumLibrary" type="teardown">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20190311 10:50:07.676" endtime="20190311 10:50:09.144"></status>
</kw>
<status status="PASS" starttime="20190311 10:49:57.532" endtime="20190311 10:50:09.144"></status>
</suite>
<statistics>
<total>
<stat pass="5" fail="0">Critical Tests</stat>
<stat pass="5" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0">deleteuser</stat>
</tag>
<suite>
<stat pass="5" fail="0" id="s1" name="Api">Api</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
